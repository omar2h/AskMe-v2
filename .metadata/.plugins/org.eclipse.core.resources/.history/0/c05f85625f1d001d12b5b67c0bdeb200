/*
 * UsersDb.cpp
 *
 *  Created on: Aug 14, 2022
 *      Author: omarh
 */

#include "UsersDb.h"

UsersDb::UsersDb() {
	// TODO Auto-generated constructor stub
	path = USERSTXT_PATH;
	del = DELIMITER;

}

UsersDb::~UsersDb() {
	// TODO Auto-generated destructor stub
}

std::string UsersDb::get_path(){
	return path;
}

std::string UsersDb::get_delimiter(){
	return del;
}
std::pair<User, bool> UsersDb::get_user(const int id)
{
	User user;
	DbManager dbManager;
	std::pair<User, bool> userPair;
	userPair.second = 0;

	const std::string path = USERSTXT_PATH;
	std::vector<std::string> lines;
	dbManager.read_file_lines(path, lines);

	for (auto &line : lines)
	{
		std::vector<std::string> v;
		dbManager.split_line_toVector(line, v, DELIMITER);

		if (stoi(v[ID]) == id)
		{
			user.id = stoi(v[ID]);
			user.allowAnonQs = stoi(v[ALLOW_ANON_Q]);
			userPair.first = user;
			userPair.second = 1;
			return userPair;
		}
	}
	return userPair;
}

std::pair<User, bool> UsersDb::check_user_login(std::vector& v, const std::string username, const std::string passowrd)
{
	if (username == v[USERNAME] && password == v[PASSWORD])
	{
		userExistPair.first.id = stoi(v[ID]);
		userExistPair.first.allowAnonQs = stoi(v[ALLOW_ANON_Q]);
		userExistPair.second = 1;
		return userExistPair;
	}
}

bool UsersDb::add_user(User &user)
{
	DbManager dbManager;
	user.id = dbManager.generate_id(USERSTXT_PATH);
	std::vector<std::string> lines;
	std::string line = std::to_string(user.id) + DELIMITER + user.username + DELIMITER + user.password + DELIMITER + std::to_string(user.allowAnonQs) + '\n';
	lines.push_back(line);
	return dbManager.write_file_lines(USERSTXT_PATH, lines, true);
}

void UsersDb::print()
{
	DbManager dbManager;
	const std::string path = "users.txt";
	std::vector<std::string> lines;
	dbManager.read_file_lines(path, lines);

	for (auto &line : lines)
	{
		std::vector<std::string> v;
		dbManager.split_line_toVector(line, v, DELIMITER);
		std::cout << "ID: " << v[ID] << "\tUserName: " << v[USERNAME] << '\n';
	}
	std::cout << '\n';
}

